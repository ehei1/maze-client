/*
-----------------------------------------------------------------------------
Filename:    Application.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
	  Ogre 1.7.x Application Wizard for VC9 (January 2010)
	  http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#ifndef __Application_h_
#define __Application_h_

namespace State { class State; }


class BodyFactory;
class DebugManager;


class Application : // tolua_export
	public Ogre::FrameListener,
	public Ogre::WindowEventListener,
	public OIS::KeyListener,
	public OIS::MouseListener
{ // tolua_export
public:
	virtual void go(void);
	static Application& GetSingleton(); // tolua_export
	inline bool Quit() { return (mShutDown = true); } // tolua_export
	bool SelectState(const char*); // tolua_export
	State::State* GetState(const char*);

	void Remove(Ogre::MovableObject::Listener*);

	Ogre::SceneManager& GetSceneManager() { return *mSceneManager; }

	BodyFactory& GetBodyFactory();

	DebugManager& GetDebugManager();

	inline OgreNewt::World* GetNewtonWorld() { return mNewtonWorld->get(); }
	inline OgreBites::SdkCameraMan* GetCameraMan() { return mCameraMan; }
	inline OIS::Keyboard& GetKeyboard() { return *mKeyboard; }
	
	const Ogre::RenderWindow* GetRenderWindow() const;

	CShinIOCP& GetNetwork() { return mNetwork; } // tolua_export
	void SetServerConnectIdx( unsigned long connectidx ) { mServerConnectIdx = connectidx; }
	unsigned long GetServerConnectIdx() const { return mServerConnectIdx; }

private:
	Application(void);
	virtual ~Application(void);

	virtual bool setup();
	virtual bool configure(void);
	virtual void chooseSceneManager(void);
	virtual void createCamera(void);
	virtual void createFrameListener(void);
	virtual void destroyScene(void);
	virtual void createViewports(void);
	virtual void setupResources(void);
	virtual void createResourceListener(void);
	virtual void loadResources(void);
	virtual bool frameRenderingQueued(const Ogre::FrameEvent& evt);
	
	virtual bool keyPressed( const OIS::KeyEvent &arg );
	virtual bool keyReleased( const OIS::KeyEvent &arg );
	virtual bool mouseMoved( const OIS::MouseEvent &arg );
	virtual bool mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id );
	virtual bool mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id );

	//Adjust mouse clipping area
	virtual void windowResized(Ogre::RenderWindow* rw);
	//Detach OIS before window shutdown (very important under Linux)
	virtual void windowClosed(Ogre::RenderWindow* rw);
	void createState();


private:
	Ogre::Root* mRoot;
	Ogre::Camera* mCamera;
	OgreBites::SdkCameraMan* mCameraMan;
	Ogre::SceneManager* mSceneManager;
	Ogre::RenderWindow* mWindow;

	bool mShutDown;

	//OIS Input devices
	OIS::InputManager* mInputManager;
	OIS::Mouse*    mMouse;
	OIS::Keyboard* mKeyboard;

	typedef std::map< std::string, State::State* > StateContainer;
	StateContainer mStateContainer;
	State::State* mCurrentState;

	std::auto_ptr< OgreNewt::World > mNewtonWorld;

	typedef tbb::concurrent_queue< Ogre::MovableObject::Listener* > RemoveListenerQueue;
	RemoveListenerQueue mRemoveListenerQueue;

	std::auto_ptr< BodyFactory > mBodyFactory;

	std::auto_ptr< DebugManager > mDebugManager;

	unsigned long mServerConnectIdx;
	CShinIOCP mNetwork;
}; // tolua_export

#endif // #ifndef __Application_h_
